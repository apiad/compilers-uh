% Gramáticas Atributadas
% MSc. Alejandro Piad Morffis
% MatCom, UH (CC BY-SA-NC 4.0)

# Evaluando expresiones

```python echo=False
import sys
import os

sys.path.append(os.path.abspath(os.curdir))

from source.trees import Tree
```

## Recordemos la gramática LL de expresiones

    E -> T X
    X -> + T X | - T X | epsilon
    T -> F Y
    Y -> * F Y | / F Y | epsilon
    F -> ( E ) | i

## ¿Cómo evaluar una expresión cualquiera?

**Ej:** `i{3} * ( i{2} + i{5} )`

# Veamos el árbol de derivación

```python echo=False, results="plain"
Tree("E",
    Tree("T",
        Tree("F",
            Tree("i {3}")),
        Tree("Y",
            Tree("*"),
            Tree("F",
                Tree("("),
                Tree("E",
                    Tree("T",
                        Tree("F", Tree("i {2}")),
                        Tree("Y", Tree("epsilon"))),
                    Tree("X",
                        Tree("+"),
                        Tree("T",
                            Tree("F", Tree("i {5}")),
                            Tree("Y", Tree("epsilon"))),
                        Tree("X", Tree("epsilon")))),
                Tree(")")),
            Tree("Y",
                Tree("epsilon")))),
    Tree("X", Tree('epsilon'))
).print(float=False, width="100%")
```

# Implementando un evaluador de expresiones

```python
def eval(node, val=None):
    if node.type == 'i':
        return float(node.lex)
    # ...
    if node.type == 'E':
        val = eval(node.children[0])
        return eval(node.children[1], val)
    if node.type == 'X':
        if not node.children:
            return val
        if node.children[0].type == '+':
            val = val + eval(node.children[1])
        elif node.children[0] == '-':
            val = val - eval(node.children[1])
        return eval(node.children[2], tmp)
    # ...
```

# ¿Qué hay de malo con este código?

- LL nos obliga a hacer malabares con los valores
- Montón de ramas `if/else` similares
- Para saber que producción se aplicó tengo que mirar los hijos
- Para cualquier gramática LL va a ser algo igualmente horrible
- En general es poco OO y bastante feo...

. . .

## Parece código escrito por una máquina...

Para cada no-terminal en el árbol de derivación,
según la producción aplicada, hay un código específico.

## ¿Podemos generalizar este proceso, y dejárselo a las máquinas?

# Extendamos el concepto de gramática

    E -> T X      { X.val=T.exp, E.exp=X.exp }
    X -> + T X    { X1.val=X0.val + T.exp, X0.exp=X1.exp }
       | - T X    { X1.val=X0.val - T.exp, X0.exp=X1.exp }
       | epsilon  { X0.exp=X0.val }
    T -> F Y      { Y.val=F.exp, T.exp=Y.exp }
    Y -> * F Y    { Y1.val=Y0.val * F.exp, Y0.exp=Y1.exp }
       | / F Y    { Y1.val=Y0.val / F.exp, Y0.exp=Y1.exp }
       | epsilon  { Y0.exp=Y0.val }
    F -> ( E )    { F.exp=E.exp }
       | i        { F.exp=i.exp }

# Gramáticas atributadas

Una **gramática atributada** es una tupla $<G,A,R>$, donde:

- $G = <S,P,N,T>$ es una gramática libre del contexto,
- $A$ es un conjunto de atributos de la forma $X \cdot a$
  donde $X \in N \cup T$ y $a$ es un identificador único entre todos los atributos del mismo símbolo, y
- $R$ es un conjunto de reglas de la forma $<p_i, r_i>$ donde $p_i \in P$ es una producción $X \to Y_1, \ldots, Y_n$, y $r_i$ es una regla de la forma:
    1. $X \cdot a = f(Y_1 \cdot a_1, \ldots, Y_n \cdot a_n)$, o
    2. $Y_i \cdot a = f(X \cdot a_0, Y_1 \cdot a_1, \ldots, Y_n \cdot a_n)$.

    En el primer caso decimos que $a$ es un **atributo sintetizado**, y en el segundo caso, un **atributo heredado**.

# Intuitivamente...

- En cada no-terminal hay atributos, que pueden almacenar algún valor
- En cada terminal hay atributos que pone mágicamente el tokenizer
- En cada producción hay un conjunto de reglas que involucran a algunos de los atributos

## Todavía no hemos dicho en qué orden evaluar los atributos

De momento asumiremos que existe una forma de evaluarlos...

# Resolviendo dependencias del contexto

## Veamos una gramática para el lenguaje $L = a^n b^n c^n$:

    S -> ABC
    A -> aA | epsilon
    B -> bB | epsilon
    C -> cC | epsilon

# Resolviendo dependencias del contexto

## Veamos las reglas semánticas

    S -> ABC       {   S.ok = (A.cnt == B.cnt &&
                               B.cnt == C.cnt) }
    A -> aA        { A0.cnt = 1 + A1.cnt }
       | epsilon   {  A.cnt = 0 }
    B -> bB        { B0.cnt = 1 + B1.cnt }
       | epsilon   {  B.cnt = 0 }
    C -> cC        { C0.cnt = 1 + C1.cnt }
       | epsilon   {  C.cnt = 0 }

# Resolviendo dependencias del contexto

## Veamos ahora una gramática más compleja

    S -> XC
    X -> aXb | epsilon
    C -> cC  | epsilon

# Resolviendo dependencias del contexto

## Y sus respectivas reglas

    S -> XC       {   S.ok = (X.cnt == C.cnt) }
    X -> aXb      { X0.cnt = 1 + X1.cnt }
       | epsilon  {  X.cnt = 0 }
    C -> cC       { C0.cnt = 1 + C1.cnt }
       | epsilon  {  C.cnt = 0 }

# ¿Cuál es mejor?

## Gramáticas más simples

- Más fácil de entender
- Más difícil de parsear
- Cambios menos disruptores

## Gramáticas más complejas

- Más difícil de entender
- Más eficiente de parsear
- Cambios más disruptores

## La **legibilidad** y la **mantenibilidad** cuentan !!

# Computando el valor de los atributos

## Sea la cadena `aabbcc`, tenemos un árbol de derivación

```python echo=False, results="plain"
Tree("S",
    Tree("A",
        Tree("a"),
        Tree("A",
            Tree("a"),
            Tree("A", Tree("epsilon")))
    ),
    Tree("B",
        Tree("b"),
        Tree("B",
            Tree("b"),
            Tree("B", Tree("epsilon")))
    ),
    Tree("C",
        Tree("c"),
        Tree("C",
            Tree("c"),
            Tree("C", Tree("epsilon"))))
).print(float=False, width="80%")
```

# Construyendo un *grafo de dependencia*

## Un grafo de dependencia es un grafo dirigido sobre el árbol de derivación, donde:

* Los nodos son los atributos de cada símbolo en cada nodo del árbol de derivación
* Existe una arista dirigida entre un par de nodos $v \to w$ del grafo de dependencia, si los atributos correspondientes participan en una regla semántica definida en la producción asociada al nodo del árbol de derivación donde aparece $w$, de la forma $w = f(\ldots, v, \ldots)$. Es decir, si el atributo $w$ *depende* del atributo $v$.

# ¿Qué nos dice este grafo?

## Un grafo de dependencias nos permite:

* saber si la cadena es evaluable, y
* determinar un orden para evaluar los atributos.

## Decimos que la gramática es evaluable si y solo si el grafo de dependencia de todo árbol de derivación es un **DAG**.

# Algunas gramáticas particulares son fáciles de evaluar:

## Gramáticas **s-atributadas**:

Una gramática atributada es **s-atributada** si y solo si, para toda regla $r_i$ asociada a una producción $X \to Y_1, \ldots, Y_n$, se cumple que $r_i$ es de la forma $X \cdot a = f(Y_1 \cdot a_1, \ldots, Y_n \cdot a_n)$.

. . .

## Gramáticas **l-atributadas**:

Una gramática atributada es **l-atributada** si y solo si toda regla $r_i$ asociada a una producción $X \to Y_1, \ldots, Y_n$ es de una de las siguientes formas:

1. $X \cdot a = f(Y_1 \cdot a_1, \ldots, Y_n \cdot a_n)$, ó
2. $Y_i \cdot a_i = f(X \cdot a, Y_1 \cdot a_1, \ldots, Y_{i-1} \cdot a_{i-1})$.

# Evaluando atributos **durante** el *parsing* LL

    E -> T X      { X.val=T.exp, E.exp=X.exp }
    X -> + T X    { X1.val=X0.val + T.exp, X0.exp=X1.exp }
       | - T X    { X1.val=X0.val - T.exp, X0.exp=X1.exp }
       | epsilon  { X0.exp=X0.val }
    T -> F Y      { Y.val=F.exp, T.exp=Y.exp }
    Y -> * F Y    { Y1.val=Y0.val * F.exp, Y0.exp=Y1.exp }
       | / F Y    { Y1.val=Y0.val / F.exp, Y0.exp=Y1.exp }
       | epsilon  { Y0.exp=Y0.val }
    F -> ( E )    { F.exp=E.exp }
       | i        { F.exp=i.exp }
