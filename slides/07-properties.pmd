% Propiedades de los Lenguajes Regulares
% MSc. Alejandro Piad Morffis
% MatCom, UH (CC BY-SA-NC 4.0)

```python echo=False
import sys
import os

sys.path.append(os.path.abspath(os.curdir))

from source.automata import Automaton
from source.diagrams import Lexer
```

# Subiendo un nivel...

## ¿Qué es un lenguaje?

. . .

Un lenguaje es un conjunto de cadenas.

. . .

\vspace{1cm}

## ¿Qué operaciones podemos hacer con 2 lenguajes?

. . .

> - Operaciones entre conjuntos (unión, intersección, diferencia)...
> - Operaciones entre cadenas (concatenar, reverso, mezclar)...


# Recordemos la definición

> Un lenguaje $L$ es regular si y solo si existe un Autómata Finito Determinista $A=<Q,q_0,V,F,f>$ tal que $L_A = L$.

\vspace{0.5cm}

## ¿Podemos caracterizar el conjunto de todos los lenguajes regulares?

\vspace{0.5cm}

. . .

> Sea $\mathfrak{L_R}$ el conjunto de todos los lenguajes regulares, ¿para cuáles operaciones
es $\mathfrak{L_R}$ cerrado?

> (Notar que aquí tenemos conjuntos en 2 niveles diferentes...)

# ¿Cómo demostramos esto?

. . .

Sean $L_1$ y $L_2$ dos lenguajes regulares cualesquiera, queremos demostrar:

- **Unión**: $L_1 \cap L_2$ es regular.
- **Intersección**: $L_1 \cup L_2$ es regular.
- **Diferencia**: $L_1 / L_2$ es regular.
- **Complemento**: $L_1^C$ es regular.
- **Concatenación**: $L_1 L_2$ es regular.
- **Reverso**: $L_1^R$ es regular.
- ...

. . .

### Idea para la demostración:

Tomemos los autómatas $A_1$ y $A_2$ y tratemos de construir un autómata para la operación correspondiente.

# Antes de comenzar

## Cosas que ya sabemos (por construcción)

- El Universo es regular
- Cualquier lenguaje finito es regular

## Además

No es necesario construir un DFA, nos basta con construir un NFA (¿por qué?)...

. . .

## Una herramienta adicional

> Sea $L$ un lenguaje regular, existe un NFA $A=<Q,q_0,V,F,f>$ con $L_A = L$ tal que $|F|=1$.
> \newline
> _¿Por qué? ¿De qué nos sirve?_

# Primera técnica: Combinando autómatas {.t}

\vspace{0.5cm}

> Sean $L_1$ y $L_2$ dos lenguajes regulares, entonces $L_1 \cup L_2$ es regular.

### Idea de la demostración

. . .

\vspace{1cm}

```python echo=False, results="plain"
Automaton('q0*', ['qf*'], {
    ('q0*', 'e'):   'q01',
    ('q0*', 'e '):  'q02',
    ('q01', '... (A1) ...'): 'qf1',
    ('q02', '... (A2) ...'): 'qf2',
    ('qf1', 'e',):  'qf*',
    ('qf2', 'e',):  'qf*',
}).print(width="100%", float=False)
```

# Primera técnica: Combinando autómatas {.t}

\vspace{0.5cm}

> Sean $L_1$ y $L_2$ dos lenguajes regulares, entonces $L_1 \cup L_2$ es regular.

### Formalización

- Sean $A_1$ y $A_2$ los NFA correspondientes (con un solo estado final).
- Construyamos el autómata $A_{1,2}$ de la siguiente manera:
    - $Q = Q^1 \cup Q^2 \cup \{q_0^*, q_f^*\}$
    - $q_0 = q_0^*$
    - $V = V^1 \cup V^2$
    - $F = \{q_f^*\}$
    - $f = f^1 \cup f^2 \cup$ ...
      $\{ <q_0^*,\epsilon,q_0^1>,<q_0^*,\epsilon,q_0^2>,<q_f^1,\epsilon,q_f^*>, <q_f^2,\epsilon,q_f^*> \}$

# Primera técnica: Combinando autómatas

### Demostración de correctitud

- $\Rightarrow$ Sea $\omega \in L(A_1)$:
    - Existe una secuencia $<q_0^1,\ldots,q_f^1>$ que reconoce $\omega$.
    - La secuencia $<q_0^*,q_0^1,\ldots,q_f^1,q_f^*>$ reconoce $\omega$ en $A_{1,2}$.
    - $\omega \in L(A_{1,2})$.
    - ... (_idem_ para $A_2$).
    - $\omega \in L(A_1) \cup L(A_2) \Rightarrow \omega \in L(A_{1,2})$
- $\Leftarrow$ Sea $\omega \in L(A_{1,2})$:
    - Existe una secuencia $<q_0^*,q^{(1)},\ldots,q^{(f)},q_f^*>$ que reconoce $\omega$.
    - $q^{(1)} = q_0^1$ o $q^{(1)} = q_0^2$ (_¿por qué?_). Supongamos que $q^{(1)} = q_0^1$.
    - $q^{(f)} = q_0^f$ (_¿por qué?_).
    - La subsecuencia $<q^{(1)},\ldots,q^{(f)}>$ es $q_0^1,\ldots,q_f^1$.
    - $\omega \in L(A_1)$.
    - ... (_idem_ para $L(A_2)$).
    - $\omega \in L(A_{1,2}) \Rightarrow \omega \in L(A_1) \cup L(A_2)$ \qed

# Otra combinación

\vspace{0.5cm}

> Sean $L_1$ y $L_2$ dos lenguajes regulares, entonces $L_1 L_2$ es regular.

\vspace{0.5cm}

### Idea de la demostración

. . .

\vspace{1cm}

```python echo=False, results="plain"
Automaton('q01', ['qf2'], {
    ('q01', '... (A1) ...'): 'qf1',
    ('q02', '... (A2) ...'): 'qf2',
    ('qf1', 'e',):  'q02',
}).print(width="100%", float=False)
```

\vspace{0.5cm}

_Les dejo a ustedes la formalización..._


# Segunda técnica: Modificando el autómata

\vspace{0.5cm}

> Sea $L$ un lenguaje regular, el complemento $L^C$ es regular.

\vspace{0.5cm}

. . .

### Idea de la demostración

- Sea $A=<Q,q_0,V,F,f$ un **DFA** para $L$, **totalmente especificado**.
- Construyamos el autómata $A^C=<Q,q_0,V,F^C,f>$ donde:
    - $F^C = Q / F$.

> Lo que hacemos es _invertir_ los estados finales...

# Segunda técnica: Modificando el autómata

### Demostremos que $L(A^C) = L(A)^C$

- $\Rightarrow$ Sea $\omega \in L(A)^C$:
    - $\omega \notin L(A)$
    - Existe una **única** secuencia en $<q_0,\ldots,q_n>$ en $A$ donde $q_n \notin F$.
    - Luego $q_n \in F^C$.
    - La secuencia  $<q_0,\ldots,q_n>$ en $A^C$ reconoce $\omega$.
    - $\omega \in L(A)^C \Rightarrow \omega \in L(A^C)$
- $\Leftarrow$ Sea $\omega \in L(A^C)$:
    - Existe una **única** secuencia $<q_0,\ldots,q_n>$ en $A^C$ donde $q_n \in F^C$.
    - Luego $q_n \notin F$.
    - $\omega \notin L(A)$ (_¿por qué podemos estar seguros?_).
    - $\omega \in L(A)^C$.
    - $\omega \in L(A^C) \Rightarrow \omega \in L(A)^C$

# Otro ejemplo de modificación

\vspace{0.5cm}

> Sea $L$ un lenguaje regular, el reverso $L^R$ es regular.

\vspace{0.5cm}

### Idea de la demostración

. . .

> Tomemos el autómata $A$ de $L$ e invertimos todas las aristas...

- ¿Qué estados son finales?
- ¿Qué estado es el nuevo estado inicial?
- ¿El nuevo autómata queda determinista?
- ¿Cómo demostramos la igualdad?
- ¿Nos conviene pedir que $A$ sea determinista, no determinista, totalmente especificado...?

# Tercera técnica: álgebra de conjuntos

\vspace{0.5cm}

> Sean $L_1$ y $L_2$ dos lenguajes regulares, entonces $L_1 \cap L_2$ es regular.

\vspace{0.5cm}

### Idea de la demostración

¿Podemos escribir $L_1 \cap L_2$ usando solo unión y complemento?

. . .

$$L_1 \cap L_2 = (L_1^C \cup L_2^C)^C$$

> Luego, por construcción, $L_1 \cap L_2$ es regular !!!

# ¿Otro ejemplo?

\vspace{0.5cm}

> Sean $L_1$ y $L_2$ dos lenguajes regulares, entonces $L_1 / L_2$ es regular.

\vspace{0.5cm}

### Idea de la demostración

¿Podemos escribir $L_1 / L_2$ usando lo que tenemos hasta ahora?

. . .

$$L_1 / L_2 = L_1 \cap L_2^C$$

> Parece un poco de trampa, ¿eh?

# Técnica secreta: multiplicación de autómatas

Si les pareció un poco decepcionante la demostración de $\cap$, hagámoslo _de verdad_.

### Idea intuitiva

Hacer un autómata que simule el reconocer _en paralelo_ la cadena $\omega$ en $A_1$ y $A_2$.

- Los estados serán _pares de estados_ $q_{ij}$.
- Las transiciones serán hacia $q_{kl}$ donde $q_i \rightarrow q_k$ y $q_j \rightarrow q_l$.
- Los estados finales son los $q_{ij}$ donde $q_i \in F^1$ y $q_j \in F^2$.

# Técnica secreta: multiplicación de autómatas

### Ejemplo

- $L_1 =$ cantidad par de $a$.

```python echo=False, results="plain"
Automaton('q0', ['q0'], {
    ('q0', 'a'): 'q1',
    ('q0', 'b'): 'q0',
    ('q1', 'a'): 'q0',
    ('q1', 'b'): 'q1',
}).print(width="30%", float=False)
```

- $L_2 =$ cantidad par de $b$.

```python echo=False, results="plain"
Automaton('q0', ['q0'], {
    ('q0', 'a'): 'q0',
    ('q0', 'b'): 'q1',
    ('q1', 'a'): 'q1',
    ('q1', 'b'): 'q0',
}).print(width="30%", float=False)
```

# Técnica secreta: multiplicación de autómatas

### Ejemplo

- $L_{1,2} =$ cantidad par de $a$ y cantidad par de $b$.

```python echo=False, results="plain"
Automaton('q00', ['q00'], {
    ('q00', 'a'): 'q10',
    ('q00', 'b'): 'q01',
    ('q10', 'a'): 'q00',
    ('q10', 'b'): 'q11',
    ('q01', 'a'): 'q11',
    ('q01', 'b'): 'q00',
    ('q11', 'a'): 'q01',
    ('q11', 'b'): 'q10',
}).print(width="80%", float=False)
```

# Multiplicación de autómatas

- Sean $A_1$ y $A_2$ dos DFA, definiremos su multiplicación como:
    - $Q = \alpha(Q^1 \times Q^2$)
    - $q_0 = q_{00}$
    - $V = V^1 \cup V^2$
    - $F = \sigma(F^1, F^2)$
    - $f = \delta(f^1, f^2)$

> Según como escojamos $\alpha$, $\sigma$ y $\delta$, tendremos diferentes lenguajes.

### Ejemplos

- $\sigma = F^1 \cap F^2$ para la intersección.
- $\sigma = F^1 \cap (Q^2 / F^2)$ para la diferencia.
- $Zip(L_1, L_2) =$
  $\{ \omega = u_1v_1\ldots u_nv_v \,\, | \,\, u_1\ldots u_n \in L_1, v_1\ldots v_n \in L_2 \}$

# Lo que esperábamos: Expresiones regulares

Por cada tipo de expresión regular, sabemos como construir un NFA.

- $a$
- $\epsilon$
- $(s)|(r)$
- $(s)(r)$
- $(r)^*$

**NOTA**: Es conveniente definir los NFAs con exactamente un estado final.

# Bonus track: Gramáticas regulares

Recordemos que una gramática regular tiene producciones de la forma:

- $A \rightarrow bC | d$
- $S \rightarrow \epsilon$ (si $\epsilon$ pertenece al lenguaje).

### Convirtiendo autómatas en gramáticas regulares (y viceversa)

- Por cada estado tendremos un no-terminal.
- El estado inicial es $S$.
- Las transiciones son producciones $A \rightarrow bC$.
- Si el estado es final además tendremos $A \rightarrow d$.
- Si $\epsilon$ pertenece al lenguaje entonces $S \rightarrow \epsilon$.

# Conclusiones

> - En general _casi_ todas las operaciones entre lenguajes son cerradas en $\mathfrak{L_R}$.
> - Con las operaciones de unión y concatenación es posible demostrar que las expresiones regulares están contenidas en $\mathfrak{L_R}$.
> - Para demostrar la equivalencia es necesario obtener una expresión regular para todo autómata (no es trivial).
> - Las gramáticas regulares equivalen directamente a NFAs.
> - Existen lenguajes que no son regulares (intuitivamente, por eso necesitamos _parsers_), pero esos los dejaremos para otra conferencia.
